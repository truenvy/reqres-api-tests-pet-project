package org.truenvy.reqres.rest.configuration;

import io.qameta.allure.restassured.AllureRestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.filter.log.ResponseLoggingFilter;
import io.restassured.http.ContentType;
import io.restassured.specification.RequestSpecification;
import org.truenvy.reqres.configs.ConfigProvider;
import org.truenvy.reqres.configs.ProjectConfig;

import java.util.Arrays;
import java.util.Collections;

import static io.restassured.RestAssured.given;

public abstract class RestApiClientSpec {
    private final ProjectConfig projectConfig = ConfigProvider.INSTANCE.getProjectConfig();
    protected RequestSpecification requestSpec;

    /**
     * Constructs and initializes a new instance of RestApiClientSpec.
     * <p>
     * This constructor configures the `requestSpec` field by utilizing the project's configuration settings
     * for the base URI, base path, and content type. Additionally, it applies logging and filtering capabilities
     * based on the application's configuration.
     * <p>
     * The `requestSpec` is built using a `RequestSpecBuilder` instance generated by the `calculateLogging` method.
     * <p>
     * Key behaviors:
     * - The `baseUri` and `basePath` are retrieved from the application's `ProjectConfig` instance.
     * - The content type is set to JSON.
     * - Conditional logging and filters are added depending on the logging configuration.
     */
    protected RestApiClientSpec() {
        this.requestSpec = calculateLogging()
                .setBaseUri(projectConfig.baseUri())
                .setBasePath(projectConfig.basePath())
                .setContentType(ContentType.JSON)
                .build();
    }

    /**
     * Configures a RequestSpecBuilder instance with logging and filtering based on the application's
     * project configuration settings.
     * <p>
     * If the logging feature is enabled in the configuration, this method adds request and response logging
     * filters along with an AllureRestAssured filter. Otherwise, it only adds the AllureRestAssured filter.
     *
     * @return A pre-configured instance of RequestSpecBuilder with appropriate filters applied.
     */
    private RequestSpecBuilder calculateLogging() {
        if (projectConfig.logging()) {
            return new RequestSpecBuilder()
                    .addFilters(
                            Arrays.asList(
                                    new RequestLoggingFilter(),
                                    new ResponseLoggingFilter(),
                                    new AllureRestAssured()
                            )
                    );
        }
        return new RequestSpecBuilder()
                .addFilters(
                        Collections.singletonList(
                                new AllureRestAssured()
                        )
                );
    }

    protected RequestSpecification getRequestSpec() {
        return given().spec(this.requestSpec);
    }
}
